// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feedlightpb/feedlight.proto

package feedlightpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Feedback struct {
	Feedback             string   `protobuf:"bytes,1,opt,name=feedback,proto3" json:"feedback,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Similar              bool     `protobuf:"varint,3,opt,name=similar,proto3" json:"similar,omitempty"`
	Dissimilar           bool     `protobuf:"varint,4,opt,name=dissimilar,proto3" json:"dissimilar,omitempty"`
	Response             string   `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	SharePublicly        bool     `protobuf:"varint,6,opt,name=share_publicly,json=sharePublicly,proto3" json:"share_publicly,omitempty"`
	Created              int64    `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Id                   int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feedback) Reset()      { *m = Feedback{} }
func (*Feedback) ProtoMessage() {}
func (*Feedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{0}
}
func (m *Feedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Feedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feedback.Merge(dst, src)
}
func (m *Feedback) XXX_Size() int {
	return m.Size()
}
func (m *Feedback) XXX_DiscardUnknown() {
	xxx_messageInfo_Feedback.DiscardUnknown(m)
}

var xxx_messageInfo_Feedback proto.InternalMessageInfo

func (m *Feedback) GetFeedback() string {
	if m != nil {
		return m.Feedback
	}
	return ""
}

func (m *Feedback) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Feedback) GetSimilar() bool {
	if m != nil {
		return m.Similar
	}
	return false
}

func (m *Feedback) GetDissimilar() bool {
	if m != nil {
		return m.Dissimilar
	}
	return false
}

func (m *Feedback) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Feedback) GetSharePublicly() bool {
	if m != nil {
		return m.SharePublicly
	}
	return false
}

func (m *Feedback) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Feedback) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SimilarFeedbackRequest struct {
	Domain               string   `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Feedback             Feedback `protobuf:"bytes,1,opt,name=feedback" json:"feedback"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimilarFeedbackRequest) Reset()      { *m = SimilarFeedbackRequest{} }
func (*SimilarFeedbackRequest) ProtoMessage() {}
func (*SimilarFeedbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{1}
}
func (m *SimilarFeedbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimilarFeedbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimilarFeedbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SimilarFeedbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimilarFeedbackRequest.Merge(dst, src)
}
func (m *SimilarFeedbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimilarFeedbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimilarFeedbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimilarFeedbackRequest proto.InternalMessageInfo

func (m *SimilarFeedbackRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SimilarFeedbackRequest) GetFeedback() Feedback {
	if m != nil {
		return m.Feedback
	}
	return Feedback{}
}

type SimilarFeedbackResponse struct {
	Feedback             []Feedback `protobuf:"bytes,1,rep,name=feedback" json:"feedback"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SimilarFeedbackResponse) Reset()      { *m = SimilarFeedbackResponse{} }
func (*SimilarFeedbackResponse) ProtoMessage() {}
func (*SimilarFeedbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{2}
}
func (m *SimilarFeedbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimilarFeedbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimilarFeedbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SimilarFeedbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimilarFeedbackResponse.Merge(dst, src)
}
func (m *SimilarFeedbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimilarFeedbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimilarFeedbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimilarFeedbackResponse proto.InternalMessageInfo

func (m *SimilarFeedbackResponse) GetFeedback() []Feedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type SubmitFeedbackRequest struct {
	Domain               string     `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Email                string     `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Feedback             Feedback   `protobuf:"bytes,2,opt,name=feedback" json:"feedback"`
	Similar              []Feedback `protobuf:"bytes,3,rep,name=similar" json:"similar"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SubmitFeedbackRequest) Reset()      { *m = SubmitFeedbackRequest{} }
func (*SubmitFeedbackRequest) ProtoMessage() {}
func (*SubmitFeedbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{3}
}
func (m *SubmitFeedbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitFeedbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitFeedbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitFeedbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitFeedbackRequest.Merge(dst, src)
}
func (m *SubmitFeedbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitFeedbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitFeedbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitFeedbackRequest proto.InternalMessageInfo

func (m *SubmitFeedbackRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SubmitFeedbackRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SubmitFeedbackRequest) GetFeedback() Feedback {
	if m != nil {
		return m.Feedback
	}
	return Feedback{}
}

func (m *SubmitFeedbackRequest) GetSimilar() []Feedback {
	if m != nil {
		return m.Similar
	}
	return nil
}

type SubmitFeedbackResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitFeedbackResponse) Reset()      { *m = SubmitFeedbackResponse{} }
func (*SubmitFeedbackResponse) ProtoMessage() {}
func (*SubmitFeedbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{4}
}
func (m *SubmitFeedbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitFeedbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitFeedbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubmitFeedbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitFeedbackResponse.Merge(dst, src)
}
func (m *SubmitFeedbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitFeedbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitFeedbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitFeedbackResponse proto.InternalMessageInfo

func (m *SubmitFeedbackResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Status struct {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any
	// user-facing error message should be localized and sent in the
	// [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_feedlight_1f55e81f501d6cf8, []int{5}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Feedback)(nil), "feedlightpb.Feedback")
	proto.RegisterType((*SimilarFeedbackRequest)(nil), "feedlightpb.SimilarFeedbackRequest")
	proto.RegisterType((*SimilarFeedbackResponse)(nil), "feedlightpb.SimilarFeedbackResponse")
	proto.RegisterType((*SubmitFeedbackRequest)(nil), "feedlightpb.SubmitFeedbackRequest")
	proto.RegisterType((*SubmitFeedbackResponse)(nil), "feedlightpb.SubmitFeedbackResponse")
	proto.RegisterType((*Status)(nil), "feedlightpb.Status")
}
func (this *Feedback) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feedback)
	if !ok {
		that2, ok := that.(Feedback)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Feedback != that1.Feedback {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Similar != that1.Similar {
		return false
	}
	if this.Dissimilar != that1.Dissimilar {
		return false
	}
	if this.Response != that1.Response {
		return false
	}
	if this.SharePublicly != that1.SharePublicly {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SimilarFeedbackRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimilarFeedbackRequest)
	if !ok {
		that2, ok := that.(SimilarFeedbackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if !this.Feedback.Equal(&that1.Feedback) {
		return false
	}
	return true
}
func (this *SimilarFeedbackResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimilarFeedbackResponse)
	if !ok {
		that2, ok := that.(SimilarFeedbackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Feedback) != len(that1.Feedback) {
		return false
	}
	for i := range this.Feedback {
		if !this.Feedback[i].Equal(&that1.Feedback[i]) {
			return false
		}
	}
	return true
}
func (this *SubmitFeedbackRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitFeedbackRequest)
	if !ok {
		that2, ok := that.(SubmitFeedbackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.Feedback.Equal(&that1.Feedback) {
		return false
	}
	if len(this.Similar) != len(that1.Similar) {
		return false
	}
	for i := range this.Similar {
		if !this.Similar[i].Equal(&that1.Similar[i]) {
			return false
		}
	}
	return true
}
func (this *SubmitFeedbackResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitFeedbackResponse)
	if !ok {
		that2, ok := that.(SubmitFeedbackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Feedback) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&feedlightpb.Feedback{")
	s = append(s, "Feedback: "+fmt.Sprintf("%#v", this.Feedback)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "Similar: "+fmt.Sprintf("%#v", this.Similar)+",\n")
	s = append(s, "Dissimilar: "+fmt.Sprintf("%#v", this.Dissimilar)+",\n")
	s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	s = append(s, "SharePublicly: "+fmt.Sprintf("%#v", this.SharePublicly)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimilarFeedbackRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&feedlightpb.SimilarFeedbackRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Feedback: "+strings.Replace(this.Feedback.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimilarFeedbackResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&feedlightpb.SimilarFeedbackResponse{")
	if this.Feedback != nil {
		vs := make([]*Feedback, len(this.Feedback))
		for i := range vs {
			vs[i] = &this.Feedback[i]
		}
		s = append(s, "Feedback: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitFeedbackRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&feedlightpb.SubmitFeedbackRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Feedback: "+strings.Replace(this.Feedback.GoString(), `&`, ``, 1)+",\n")
	if this.Similar != nil {
		vs := make([]*Feedback, len(this.Similar))
		for i := range vs {
			vs[i] = &this.Similar[i]
		}
		s = append(s, "Similar: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitFeedbackResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&feedlightpb.SubmitFeedbackResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&feedlightpb.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFeedlight(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	SimilarFeedback(ctx context.Context, in *SimilarFeedbackRequest, opts ...grpc.CallOption) (*SimilarFeedbackResponse, error)
	SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error)
}

type feedbackServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeedbackServiceClient(cc *grpc.ClientConn) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) SimilarFeedback(ctx context.Context, in *SimilarFeedbackRequest, opts ...grpc.CallOption) (*SimilarFeedbackResponse, error) {
	out := new(SimilarFeedbackResponse)
	err := c.cc.Invoke(ctx, "/feedlightpb.FeedbackService/SimilarFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*SubmitFeedbackResponse, error) {
	out := new(SubmitFeedbackResponse)
	err := c.cc.Invoke(ctx, "/feedlightpb.FeedbackService/SubmitFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
type FeedbackServiceServer interface {
	SimilarFeedback(context.Context, *SimilarFeedbackRequest) (*SimilarFeedbackResponse, error)
	SubmitFeedback(context.Context, *SubmitFeedbackRequest) (*SubmitFeedbackResponse, error)
}

func RegisterFeedbackServiceServer(s *grpc.Server, srv FeedbackServiceServer) {
	s.RegisterService(&_FeedbackService_serviceDesc, srv)
}

func _FeedbackService_SimilarFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).SimilarFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedlightpb.FeedbackService/SimilarFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).SimilarFeedback(ctx, req.(*SimilarFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_SubmitFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).SubmitFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feedlightpb.FeedbackService/SubmitFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).SubmitFeedback(ctx, req.(*SubmitFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feedlightpb.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimilarFeedback",
			Handler:    _FeedbackService_SimilarFeedback_Handler,
		},
		{
			MethodName: "SubmitFeedback",
			Handler:    _FeedbackService_SubmitFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedlightpb/feedlight.proto",
}

func (m *Feedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feedback) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Feedback) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Feedback)))
		i += copy(dAtA[i:], m.Feedback)
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(m.Score))
	}
	if m.Similar {
		dAtA[i] = 0x18
		i++
		if m.Similar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dissimilar {
		dAtA[i] = 0x20
		i++
		if m.Dissimilar {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Response) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	if m.SharePublicly {
		dAtA[i] = 0x30
		i++
		if m.SharePublicly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Created != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(m.Created))
	}
	if m.Id != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SimilarFeedbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimilarFeedbackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintFeedlight(dAtA, i, uint64(m.Feedback.Size()))
	n1, err := m.Feedback.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Domain) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *SimilarFeedbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimilarFeedbackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Feedback) > 0 {
		for _, msg := range m.Feedback {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFeedlight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SubmitFeedbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitFeedbackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintFeedlight(dAtA, i, uint64(m.Feedback.Size()))
	n2, err := m.Feedback.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Similar) > 0 {
		for _, msg := range m.Similar {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFeedlight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *SubmitFeedbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitFeedbackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeedlight(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintFeedlight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Feedback) Size() (n int) {
	var l int
	_ = l
	l = len(m.Feedback)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovFeedlight(uint64(m.Score))
	}
	if m.Similar {
		n += 2
	}
	if m.Dissimilar {
		n += 2
	}
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	if m.SharePublicly {
		n += 2
	}
	if m.Created != 0 {
		n += 1 + sovFeedlight(uint64(m.Created))
	}
	if m.Id != 0 {
		n += 1 + sovFeedlight(uint64(m.Id))
	}
	return n
}

func (m *SimilarFeedbackRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Feedback.Size()
	n += 1 + l + sovFeedlight(uint64(l))
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	return n
}

func (m *SimilarFeedbackResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Feedback) > 0 {
		for _, e := range m.Feedback {
			l = e.Size()
			n += 1 + l + sovFeedlight(uint64(l))
		}
	}
	return n
}

func (m *SubmitFeedbackRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	l = m.Feedback.Size()
	n += 1 + l + sovFeedlight(uint64(l))
	if len(m.Similar) > 0 {
		for _, e := range m.Similar {
			l = e.Size()
			n += 1 + l + sovFeedlight(uint64(l))
		}
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	return n
}

func (m *SubmitFeedbackResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFeedlight(uint64(m.Id))
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFeedlight(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFeedlight(uint64(l))
	}
	return n
}

func sovFeedlight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFeedlight(x uint64) (n int) {
	return sovFeedlight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Feedback) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feedback{`,
		`Feedback:` + fmt.Sprintf("%v", this.Feedback) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Similar:` + fmt.Sprintf("%v", this.Similar) + `,`,
		`Dissimilar:` + fmt.Sprintf("%v", this.Dissimilar) + `,`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`SharePublicly:` + fmt.Sprintf("%v", this.SharePublicly) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimilarFeedbackRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimilarFeedbackRequest{`,
		`Feedback:` + strings.Replace(strings.Replace(this.Feedback.String(), "Feedback", "Feedback", 1), `&`, ``, 1) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimilarFeedbackResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimilarFeedbackResponse{`,
		`Feedback:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Feedback), "Feedback", "Feedback", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitFeedbackRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitFeedbackRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Feedback:` + strings.Replace(strings.Replace(this.Feedback.String(), "Feedback", "Feedback", 1), `&`, ``, 1) + `,`,
		`Similar:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Similar), "Feedback", "Feedback", 1), `&`, ``, 1) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitFeedbackResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitFeedbackResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFeedlight(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Feedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Similar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Similar = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dissimilar", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dissimilar = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePublicly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SharePublicly = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimilarFeedbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimilarFeedbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimilarFeedbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Feedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimilarFeedbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimilarFeedbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimilarFeedbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feedback = append(m.Feedback, Feedback{})
			if err := m.Feedback[len(m.Feedback)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitFeedbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitFeedbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitFeedbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feedback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Feedback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Similar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Similar = append(m.Similar, Feedback{})
			if err := m.Similar[len(m.Similar)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitFeedbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitFeedbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitFeedbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedlight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedlight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeedlight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeedlight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeedlight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedlight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFeedlight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFeedlight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFeedlight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFeedlight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeedlight   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("feedlightpb/feedlight.proto", fileDescriptor_feedlight_1f55e81f501d6cf8)
}

var fileDescriptor_feedlight_1f55e81f501d6cf8 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0x38, 0x3f, 0x4d, 0x6f, 0xf5, 0xa5, 0xd2, 0xa8, 0xcd, 0x67, 0x05, 0x34, 0x44, 0x2e,
	0x3f, 0x51, 0x29, 0xb1, 0x1a, 0x04, 0x48, 0x5d, 0x76, 0xc1, 0x1a, 0x39, 0x0f, 0x80, 0xc6, 0xf6,
	0xc4, 0x19, 0x61, 0x67, 0x82, 0x67, 0x5c, 0x89, 0x1d, 0x62, 0xcd, 0xa2, 0x12, 0x2f, 0xc1, 0x1e,
	0xf1, 0x0e, 0x5d, 0x56, 0x62, 0xc3, 0x0a, 0x11, 0x97, 0x05, 0xcb, 0x3e, 0x02, 0xca, 0xd8, 0x0e,
	0xb1, 0x29, 0x05, 0x76, 0xf7, 0xdc, 0x7b, 0x27, 0xe7, 0xdc, 0x73, 0x92, 0xc0, 0x8d, 0x09, 0x63,
	0x7e, 0xc8, 0x83, 0xa9, 0x9a, 0xbb, 0xf6, 0xaa, 0x1e, 0xce, 0x63, 0xa1, 0x04, 0xde, 0x5a, 0x1b,
	0xf6, 0x6e, 0x06, 0x42, 0x04, 0x21, 0xb3, 0xe9, 0x9c, 0xdb, 0x74, 0x36, 0x13, 0x8a, 0x2a, 0x2e,
	0x66, 0x32, 0x5b, 0xed, 0x3d, 0x08, 0xb8, 0x9a, 0x26, 0xee, 0xd0, 0x13, 0x91, 0x1d, 0x88, 0x40,
	0xd8, 0xba, 0xed, 0x26, 0x13, 0x8d, 0x34, 0xd0, 0x55, 0xb6, 0x6e, 0x5d, 0x20, 0x68, 0x3f, 0x65,
	0xcc, 0x77, 0xa9, 0xf7, 0x02, 0xf7, 0xa0, 0x3d, 0xc9, 0x6b, 0x13, 0xf5, 0xd1, 0x60, 0xd3, 0x59,
	0x61, 0xbc, 0x03, 0x4d, 0xe9, 0x89, 0x98, 0x99, 0x46, 0x1f, 0x0d, 0x9a, 0x4e, 0x06, 0xb0, 0x09,
	0x1b, 0x92, 0x47, 0x3c, 0xa4, 0xb1, 0x59, 0xef, 0xa3, 0x41, 0xdb, 0x29, 0x20, 0x26, 0x00, 0x3e,
	0x97, 0xc5, 0xb0, 0xa1, 0x87, 0x6b, 0x9d, 0x25, 0x57, 0xcc, 0xe4, 0x5c, 0xcc, 0x24, 0x33, 0x9b,
	0x19, 0x57, 0x81, 0xf1, 0x1d, 0xe8, 0xc8, 0x29, 0x8d, 0xd9, 0xf3, 0x79, 0xe2, 0x86, 0xdc, 0x0b,
	0x5f, 0x99, 0x2d, 0xfd, 0xfe, 0x3f, 0xdd, 0x7d, 0x96, 0x37, 0x97, 0xe4, 0x5e, 0xcc, 0xa8, 0x62,
	0xbe, 0xb9, 0xd1, 0x47, 0x83, 0xba, 0x53, 0x40, 0xdc, 0x01, 0x83, 0xfb, 0x66, 0x5b, 0x37, 0x0d,
	0xee, 0x5b, 0x1c, 0xba, 0xe3, 0x8c, 0xb7, 0xb8, 0xd5, 0x61, 0x2f, 0x13, 0x26, 0x15, 0x7e, 0x52,
	0x39, 0x79, 0x6b, 0xb4, 0x3b, 0x5c, 0x33, 0x7b, 0x58, 0xec, 0x1f, 0x37, 0xce, 0xbe, 0xdc, 0xaa,
	0xad, 0xf9, 0xd1, 0x85, 0x96, 0x2f, 0x22, 0xca, 0x67, 0xda, 0x90, 0x4d, 0x27, 0x47, 0x96, 0x03,
	0xff, 0xff, 0x42, 0x95, 0x9f, 0x55, 0xe6, 0xaa, 0xff, 0x35, 0x97, 0xf5, 0x11, 0xc1, 0xee, 0x38,
	0x71, 0x23, 0xae, 0xaa, 0xf2, 0x77, 0xa0, 0xc9, 0x22, 0xca, 0xc3, 0x3c, 0xae, 0x0c, 0x94, 0x88,
	0x8c, 0x7f, 0x39, 0xea, 0xd1, 0x7a, 0x9c, 0x7f, 0x14, 0xb8, 0xca, 0xfa, 0xa7, 0x17, 0x8d, 0x92,
	0x17, 0x03, 0xe8, 0x56, 0x65, 0xe7, 0x56, 0x64, 0x01, 0xa1, 0x55, 0x40, 0x8f, 0xa1, 0x35, 0x56,
	0x54, 0x25, 0x12, 0x63, 0x68, 0x78, 0xc2, 0x67, 0x7a, 0xd6, 0x74, 0x74, 0xbd, 0x0c, 0x3a, 0x62,
	0x52, 0xd2, 0x80, 0xe5, 0x66, 0x17, 0x70, 0xf4, 0xc1, 0x80, 0xed, 0xe2, 0xc3, 0xc7, 0x2c, 0x3e,
	0xe1, 0x1e, 0xc3, 0xa7, 0x08, 0xb6, 0x2b, 0x11, 0xe0, 0xbd, 0xd2, 0x1d, 0x57, 0x7f, 0x17, 0x7a,
	0xb7, 0xaf, 0x5f, 0xca, 0xa4, 0x5b, 0xa3, 0x37, 0x9f, 0xbe, 0xbd, 0x33, 0x0e, 0xac, 0x7b, 0xfa,
	0x07, 0x78, 0x72, 0x68, 0x57, 0xf8, 0xed, 0xca, 0xc3, 0x23, 0xb4, 0x8f, 0xdf, 0x22, 0xe8, 0x94,
	0x9d, 0xc0, 0x56, 0x99, 0xec, 0xaa, 0x74, 0x7b, 0x7b, 0xd7, 0xee, 0xe4, 0x7a, 0x0e, 0xb5, 0x9e,
	0xfb, 0xd6, 0xdd, 0xdf, 0xea, 0x29, 0xbd, 0x3b, 0x42, 0xfb, 0xc7, 0x07, 0xe7, 0x0b, 0x52, 0xfb,
	0xbc, 0x20, 0xb5, 0xcb, 0x05, 0x41, 0xaf, 0x53, 0x82, 0xde, 0xa7, 0x04, 0x9d, 0xa5, 0x04, 0x9d,
	0xa7, 0x04, 0x7d, 0x4d, 0x09, 0xfa, 0x9e, 0x92, 0xda, 0x65, 0x4a, 0xd0, 0xe9, 0x05, 0xa9, 0xb9,
	0x2d, 0xfd, 0x4f, 0xf1, 0xf0, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x8a, 0x1a, 0x65, 0xa2,
	0x04, 0x00, 0x00,
}
